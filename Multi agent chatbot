import os
import streamlit as st
from dotenv import load_dotenv
from langchain_community.tools import WikipediaQueryRun
from langchain_community.utilities import WikipediaAPIWrapper
from langchain_openai import ChatOpenAI
from langgraph.prebuilt import create_react_agent
from langchain_core.messages import HumanMessage

# Load environment variables
load_dotenv()
API_KEY = os.getenv("OPENAI_API_KEY")

# Wikipedia API for external knowledge
api_wrapper = WikipediaAPIWrapper(top_k_results=1, doc_content_chars_max=300)
wikipedia_tool = WikipediaQueryRun(api_wrapper=api_wrapper)

# Function to create agent
def create_agent(llm, tools):
    return create_react_agent(llm, tools)

# History Professor Agent
history_professor_llm = ChatOpenAI(temperature=0, api_key=API_KEY, model="gpt-4o-mini")
history_tools = [wikipedia_tool]
history_professor_agent = create_agent(history_professor_llm, history_tools)

# Lawyer Agent
lawyer_llm = ChatOpenAI(temperature=0, api_key=API_KEY, model="gpt-4o-mini")
lawyer_tools = [wikipedia_tool]
lawyer_agent = create_agent(lawyer_llm, lawyer_tools)

# Geography Teacher Agent
geography_llm = ChatOpenAI(temperature=0, api_key=API_KEY, model="gpt-4o-mini")
geography_tools = [wikipedia_tool]
geography_agent = create_agent(geography_llm, geography_tools)

# Translator Agent
translator_llm = ChatOpenAI(temperature=0, api_key=API_KEY, model="gpt-4o-mini")
translator_tools = []  # Placeholder for future translation tools
translator_agent = create_agent(translator_llm, translator_tools)

# English Teacher Agent
english_llm = ChatOpenAI(temperature=0, api_key=API_KEY, model="gpt-4o-mini")
english_tools = []  # Placeholder for grammar and language tools
english_agent = create_agent(english_llm, english_tools)

# Streamlit App
st.set_page_config(page_title="Chat with Experts", layout="wide", initial_sidebar_state="expanded")
st.title("Chat with Experts")

# Theme Toggle
dark_mode = st.sidebar.toggle("Dark Mode")
if dark_mode:
    st.markdown(
        """
        <style>
        body {
            background-color: #1e1e1e;
            color: white;
        }
        .stTextInput, .stButton>button {
            background-color: #333;
            color: white;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

# Sidebar Navigation
page = st.sidebar.radio("Choose an Expert:", [
    "History Professor", "Lawyer", "Geography Teacher", "Translator", "English Teacher"
])

# Chat History
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

def clear_chat():
    st.session_state.chat_history = []

def stop_session():
    st.stop()

# Chat Interface
st.sidebar.button("Clear Chat History", on_click=clear_chat)
st.sidebar.button("End Session", on_click=stop_session)

st.subheader(f"Chat with the {page}")
st.markdown("**Namaste, I am your A.I. powered Agent. How can I help you today?**")
user_input = st.text_input("Ask a question:")

if user_input:
    if page == "History Professor":
        response = history_professor_agent.invoke({"messages": [HumanMessage(content=user_input)]})
    elif page == "Lawyer":
        response = lawyer_agent.invoke({"messages": [HumanMessage(content=user_input)]})
    elif page == "Geography Teacher":
        response = geography_agent.invoke({"messages": [HumanMessage(content=user_input)]})
    elif page == "Translator":
        response = translator_agent.invoke({"messages": [HumanMessage(content=user_input)]})
    else:
        response = english_agent.invoke({"messages": [HumanMessage(content=user_input)]})
    
    reply = response["messages"][-1].content
    st.session_state.chat_history.append((user_input, reply))

# Display Chat History
for query, res in st.session_state.chat_history:
    st.write(f"<img src='user_icon.png' width='20'/> **You:** {query}", unsafe_allow_html=True)
    st.write(f"<img src='bot_icon.png' width='20'/> **{page}:** {res}", unsafe_allow_html=True)

# requirements.txt
requirements_txt = """
streamlit
dotenv
langchain
langchain-community
langgraph
openai
langchain_openai
wikipedia
"""
with open("requirements.txt", "w") as f:
    f.write(requirements_txt)

st.success("Setup Complete! Run 'streamlit run app.py' to launch the chatbot.")
